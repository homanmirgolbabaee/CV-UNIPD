#include <opencv2/opencv.hpp>

// Global variables to store reference color and threshold
cv::Vec3b referenceColor;
int thresholdValue = 50; // You can adjust this threshold value as needed

void onMouse(int event, int x, int y, int flags, void* userdata) {
    // Check if the event is a left button click
    if (event == cv::EVENT_LBUTTONDOWN) {
        // get the image and reference color
        cv::Mat* image = static_cast<cv::Mat*>(userdata);

        // check if the coordinates are within the image boundaries
        if (x >= 0 && x < image->cols && y >= 0 && y < image->rows) {
            // Define the neighborhood size (9x9)
            int neighborhoodSize = 9;

            // Define the neighborhood boundries
            int startX = std::max(0, x - neighborhoodSize / 2);
            int endX = std::min(image->cols - 1, x + neighborhoodSize / 2);
            int startY = std::max(0, y - neighborhoodSize / 2);
            int endY = std::min(image->rows - 1, y + neighborhoodSize / 2);

            // Variables to store the sum of B, G, and R values in the neighborhood
            int sumB = 0, sumG = 0, sumR = 0;

            // Calculate the sum of B, G, and R values in the neighborhood
            for (int j = startY; j <= endY; ++j) {
                for (int i = startX; i <= endX; ++i) {
                    cv::Vec3b color = image->at<cv::Vec3b>(j, i);
                    sumB += color[0];
                    sumG += color[1];
                    sumR += color[2];
                }
            }

            // Calculate the mean of B, G, and R values in the neighborhood
            int numPixels = (endX - startX + 1) * (endY - startY + 1);
            int meanB = sumB / numPixels;
            int meanG = sumG / numPixels;
            int meanR = sumR / numPixels;

            // set the reference color
            referenceColor = cv::Vec3b(meanB, meanG, meanR);

            // Create a mask on the reference color and threshold
            cv::Mat mask = cv::Mat::zeros(image->size(), CV_8UC1); // Initialize mask as black
            for (int j = 0; j < image->rows; ++j) {
                for (int i = 0; i < image->cols; ++i) {
                    cv::Vec3b pixel = image->at<cv::Vec3b>(j, i);
                    int distance = cv::norm(pixel - referenceColor); // Euclidean distance between colors
                    if (distance <= thresholdValue) {
                        mask.at<uchar>(j, i) = 255; // Set pixel to white
                    }
                }
            }
            cv::imshow("Mask", mask);
        }
    }
}

int main() {
    cv::Mat image = cv::imread("robocup.jpg");
    if (image.empty()) {
        std::cerr << "Error: Unable to load the img." << std::endl;
        return 1;
    }
    
    cv::imshow("Image", image);
    cv::setMouseCallback("Image", onMouse, static_cast<void*>(&image));
    cv::waitKey(0);
    cv::destroyAllWindows();

    return 0;
}
